-- some parts for a beginner workshop 2023-09-30 at P46

-- WORKSHOP techno beat --> use as a intro
d1 $ jux rev $ layer [(iter' 4), every 2 ((# pan perlin) . striate 18 . (# gain sine))]
  -- $ fast 2
  -- $ rot (irand 6)
  -- $ note pat
  $ note "2 5 3 [1,3]"
  # shuffle 4 "bd clubkick bass3 [co, sn]"
  -- # room 0.2 # sz 0.2
  -- # crush 4
  # gain 0.5



-- basics simple rhythms, poly rhythms etc.

d1 $ sound "bd sd"

d1 $ sound "hh"

d1 $ sound "hh hh"

d1 $ sound "hh hh hh"

d1 $ sound "hh hh hh hh"

d2 $ sound "bd sd"

d1 silence

hush

-- ich bin ein kommentar

-- Übung zu Pattern und Mini-Notation --

-- Grundbeat
d1 $ sound "bd sd"

-- Mit ~ eine Pause einfügen
d1 $ sound "bd ~ sd ~"

-- Mit eckigen Klammern kann man eine Untersequenz einfügen
d1 $ sound "bd [bd cp] sd"

d1 $ sound "[bd bd sd] [bd sd]"

d1 $ sound "[[bd cp bd] bd sd] [bd sd]"

d1 $ sound "[[bd [bd bd bd bd]] bd sd] [bd sd]"


-- Mit dem * kann man ein Sample wiederholen
d1 $ sound "bd sd*4"

-- ... und ist äquivalent zu 
d1 $ sound "bd [sd sd]"

d1 $ sound "bd [sd cp]*2"

-- Mit / kann man ein Pattern verlangsamen (sd wird nur in jedem zweiten Cycle gespielt)
d1 $ sound "bd sd/2"

d1 $ sound "bd [sd cp]/2"


-- Mit <> können wir eine Warteschlange erzeugen, die die Samples in jedem Cycle nacheinander wechselt
d1 $ sound "bd <sd cp arpy>"

d1 $ sound "<bd sd> <sd [cp cp]> <bd [cp cp]>"

-- PAUSE PAUSE PAUSE --


-- ÜBUNGEN --


-- Mit | können wir zufällig aus zwei Samples auswählen
d1 $ sound "[bd|sd] hh hh cp"

d1 $ sound "bd? sd"

-- Mit , können wir zwei Samples/Patterns gleichzeitig spielen
d1 $ sound "[sd,cp] bd"

-- Mit ! können wir ein Sample mehrfach wiederholen (bestimmt durch die Zahl nach dem Ausrufezeichen)
d1 $ sound "bd!3 sd"

-- Beachtet den Unterschied zu "bd*3 sd": 
-- Im ersten Fall gibt es vier Ereignisse, die alle die gleiche Zeit dauern. 
-- Im zweiten Fall dauern die drei bd einen halben Cycle lang, und das sd die andere Hälfte. "bd!3 sd" ist dasselbe wie "bd bd bd sd". 
-- "bd*3 sd" ist dasselbe wie "[bd bd bd] sd"


-- Übung zu Effekten

-- Filter um Klänge wie Vokale klingen zu lassen

d1 $ sound "bd sd"
  # vowel "i"

d1 $ sound "bd sd" # vowel "a? [e|i]"

-- Mit gain können wir die Lautstärke der Pattern steuern
d1 $ sound "bd hh sd" # gain rand

-- Mit speed können wir die Geschwindigkeit mit der ein Sample abgespielt, und damit die Tonhöhe, ändern
d1 $ sound "sd*4" # speed "-5 1.5 2 0.5"

-- Mit pan können wir das Stereo-Verhälten ändern (0 = links, 0.5 = Mitte, 1 = rechts)
d1 $ sound "bd hh sd" # pan "0 0.5 1"

d1 $ sound "bd hh sd" # pan sine

-- room erzeugt einen Hall-effekt
d1 $ sound "bd hh sd" # room 0.2 # size 0.9

-- lpf ist ein Low-Pass-Filter, der die Lautstärke aller Frequenzanteile oberhalb eines bestimmten Schwellwerts absenkt
d1 $ sound "bd hh sd" # lpf 400

-- hpf ist ein High-Pass-Filter
d1 $ sound "bd hh sd" # hpf 400

--- bit crushing/distortion effect
d1 $ sound "bd hh sd" # crush "2 4 6"

hush 

-- PAUSE PAUSE PAUSE + ÜBUNGEN--


-- Übung zu Funktionen

-- n wählt ein sample aus dem Ordner des Instruments
d1 $ n "0 23 6" # sound "bd hh sd"


-- slow dehnt das Pattern über mehrere Cycles 
d1 $ sound "hh hh:1 hh:2 hh:3"

d1 $ slow 4 $ sound "hh hh:1 hh:2 hh:3"

-- fast komprimiert das Pattern in weniger als einen Cycle
d1 $ fast 2 $ sound "hh hh:1 hh:2 hh:3"

-- Merke: fast 0.5 ist äquivalent zu slow 2
d1 $ fast 0.5 $ sound "hh hh:1 hh:2 hh:3"

-- hurry ist ähnlich wie fast. Es spielt ein Pattern schneller ab, aber erhöht auch die Geschwindigkeit des Samples um den gleichen Faktor
d1 $ every 2 (hurry 2) $ sound "hh hh:1 hh:2 hh:3"

-- Die Funktion jux erzeugt Stereoeffekte, indem sie eine Funktion auf ein Pattern anwendet, allerdings nur im rechten Kanal. 
-- In diesem Fall wird das Pattern im rechten Stereo-Kanal in umgekehrter Reihenfolge abgespielt.
d1 $ jux rev $ sound "[bd [sd sd] bd sd]*2"


-- Mit stack können wir mehrere Pattern parallel in einem Kanal abspielen und individuell manipulieren
d1 $ stack [
    sound "bd sn [cp ht] hh" # pan "0.5 1", 
    fast 2 $ sound "bd sn [cp ht] hh" # crush 2]

-- Mit sometimes (und seinen Verwandten) können wir Funktionen anwenden, die nur mit einer bestimmten Wahrscheinlichkeit ausgeführt werden:
-- function	    likelihood
---------------------------
-- always	    100%
-- almostAlways	90%
-- often	    75%
-- sometimes	50%
-- rarely	    25%
-- almostNever	10%
-- never	    0%

d1 $ sometimes (# speed "-2") $ sound "[bd bd] sd*3 bd cp*2"


--- OPTIONEN

-- Mit echo können wir einen ähnlich Effekt erzielen wie mit delay. echo hat 3 Parameter:
-- Der erste parameter steuert wie oft das Sample wiederholt werden soll
-- Der zweite Parameter gibt an in welchem Abstand das jeweilige Echo zum vorhergehenden gespielt wird (z.B. im Abstand von 20% eines Cycles)
-- Der dritte Parameter gibt an um welchen Anteil das jeweils folgende Echo leiser gespielt wird (z.B. 0.5 = 50% leiser als das vorhergehende Echo)

d1 $ echo 8 0.1 0.8 $ sound "sd"

-- Mit chop können wir Samples in die angegebene Anzahl von Teilen zerstückeln 
d1 $ chop "23 42 2" $ sound "bd sd ~ hh*2"

-- Mit striate können wir einen ähnlichen Effekt wie mit chop erzeugen und die Samples zerstückeln. In diesem Fall wird die Schleife aber dreimal abgespielt, 
-- beim ersten Mal das erste Drittel jedes Samples, beim zweiten Mal das zweite Drittel jedes Samples und schließlich das letzte Drittel jedes Samples.
d1 $ striate 5 $ sound "bd sd ~ hh*2"

hush



-- synthesizers

d3 $ sound "superpiano"

d3 $ note "a4 c4 d4" # sound "superpiano"

d3 $ note "a4 c4 d4" # sound "superpiano" # legato 0.8

d3 $ note "a4 c4 d4" # sound "superhoover"




-- everything is a pattern (extra, bonus going wild)

d4 $ note "a4..c6" # sound "superhoover"
  # djf rand
  # crush "2..6"
  # legato "1..6"
  # room "<0.5..0.9>"
