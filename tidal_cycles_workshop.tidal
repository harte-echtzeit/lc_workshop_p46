-- Übung zu Pattern und Mini-Notation --

-- Mit ~ eine Pause einfügen
d1 $ sound "bd ~ sd:3 bd sd:5 ~ bd:2 sd:2"

-- Mit eckigen Klammern kann man eine Untersequenz einfügen
d1 $ sound "bd [bd cp] bd bd"

d1 $ sound "[bd bd sd:5] [bd sd:3]"

d1 $ sound "[[bd bd] bd sd:5] [bd sd:3]"

d1 $ sound "[[bd [bd bd bd bd]] bd sd:5] [bd sd:3]"

-- Mit dem * kann man ein Sample wiederholen
d1 $ sound "bd sd*2"
-- ... und ist äquivalent zu 
d1 $ sound "bd [sd sd]"

d1 $ sound "bd [sd cp]*2"

-- Mit / kann man ein Pattern verlangsamen (sd wird nur in jedem zweiten Cycle gespielt)
d1 $ sound "bd sd/2"

d1 $ sound "bd [sd cp]/2"

-- Mit <> können wir eine Warteschlange erzeugen, die die Samples in jedem Cycle nacheinander wechselt
d1 $ sound "bd <sd cp arpy>"

d1 $ sound "<bd sd> <sd [cp cp]> <bd [cp cp]>"

-- Mit | können wir zufällig aus zwei Samples auswählen
d1 $ sound "[bd:0|bd:1]"

d1 $ sound "[sd|cp]"

-- Mit , können wir zwei Samples/Patterns gleichzeitig spielen
d1 $ sound "[sd,cp]"

-- Mit ! können wir ein Sample mehrfach wiederholen (bestimmt durch die Zahl nach dem Ausrufezeichen)
d1 $ sound "bd!3 sd"

-- Beachtet den Unterschied zu "bd*3 sd": 
-- Im ersten Fall gibt es vier Ereignisse, die alle die gleiche Zeit dauern. 
-- Im zweiten Fall dauern die drei bd einen halben Cycle lang, und das sd die andere Hälfte. "bd!3 sd" ist dasselbe wie "bd bd bd sd". 
-- "bd*3 sd" ist dasselbe wie "[bd bd bd] sd"

hush

-- Übung zu Effekten

-- Filter um Klänge wie Vokale klingen zu lassen
d1 $ sound "drum drum drum drum" # vowel "a"

d1 $ sound "drum drum drum drum" # vowel "a o e e"

-- Mit gain können wir die Lautstärke der Pattern steuern
d1 $ sound "bd hh sd:1 hh sd:1 hh" # gain "1 0.7 0.5"

-- Mit speed können wir die Geschwindigkeit mit der ein Sample abgespielt, und damit die Tonhöhe, ändern
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"

-- Mit pan können wir das Stereo-Verhälten ändern (0 = links, 0.5 = Mitte, 1 = rechts)
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"

-- Mit Delay können wir eine Art Echo-Effekt erzeugen
d1 $ sound "cp" # delay 0.8 # delaytime (1/6) # delayfeedback 0.6

-- lpf ist ein Low-Pass-Filter, der die Lautstärke aller Frequenzanteile oberhalb eines bestimmten Schwellwerts absenkt
d1 $ sound "tabla*4" # n "0 1 2 3" # lpf 400

hush 

-- Übung zu Funktionen

-- slow dehnt das Pattern über mehrere Cycles 
d1 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- fast komprimiert das Pattern in weniger als einen Cycle
d1 $ fast 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- Merke: fast 0.5 ist äquivalent zu slow 2
d1 $ fast 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- hurry ist ähnlich wie fast. Es spielt ein Pattern schneller ab, aber erhöht auch die Geschwindigkeit des Samples um den gleichen Faktor
d1 $ every 2 (hurry 2) $ sound "bd sn:2 ~ cp"

-- Die Funktion jux erzeugt Stereoeffekte, indem sie eine Funktion auf ein Pattern anwendet, allerdings nur im rechten Kanal. 
-- In diesem Fall wird das Pattern im rechten Stereo-Kanal in umgekehrter Reihenfolge abgespielt.
d1 $ jux rev $ sound "[bd [sd sd] bd sd]*2"

-- Mit echo können wir einen ähnlich Effekt erzielen wie mit delay. echo hat 3 Parameter:
-- Der erste parameter steuert wie oft das Sample wiederholt werden soll
-- Der zweite Parameter gibt an in welchem Abstand das jeweilige Echo zum vorhergehenden gespielt wird (z.B. im Abstand von 20% eines Cycles)
-- Der dritte Parameter gibt an um welchen Anteil das jeweils folgende Echo leiser gespielt wird (z.B. 0.5 = 50% leiser als das vorhergehende Echo)

d1 $ echo 4 0.2 0.5 $ sound "bd sd"

-- Mit stack können wir mehrere Pattern parallel in einem Kanal abspielen und individuell manipulieren
d1 $ stack [
    sound "bd sn [cp ht] hh" # pan "0.5 1", 
    fast 2 $ sound "bd sn [cp ht] hh"]

-- Mit sometimes (und seinen Verwandten) können wir Funktionen anwenden, die nur mit einer bestimmten Wahrscheinlichkeit ausgeführt werden:
-- function	    likelihood
---------------------------
-- always	    100%
-- almostAlways	90%
-- often	    75%
-- sometimes	50%
-- rarely	    25%
-- almostNever	10%
-- never	    0%

d1 $ sometimes (# speed 2) $ sound "[bd bd] sd*3 bd cp*2"

-- Mit chop können wir Samples in die angegebene Anzahl von Teilen zerstückeln 
d1 $ chop 3 $ sound "arpy future ~ feel*2"

-- Mit striate können wir einen ähnlichen Effekt wie mit chop erzeugen und die Samples zerstückeln. In diesem Fall wird die Schleife aber dreimal abgespielt, 
-- beim ersten Mal das erste Drittel jedes Samples, beim zweiten Mal das zweite Drittel jedes Samples und schließlich das letzte Drittel jedes Samples.
d1 $ striate 3 $ sound "arpy future ~ feel*2"

hush
